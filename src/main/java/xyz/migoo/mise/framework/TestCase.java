package xyz.migoo.mise.framework;import com.alibaba.fastjson.JSONObject;import xyz.migoo.mise.extender.ExtenderHelper;import xyz.migoo.mise.framework.assertion.*;import xyz.migoo.mise.framework.selenium.MiSe;import xyz.migoo.mise.report.MiSeLog;import java.util.ArrayList;import java.util.List;/** * @author xiaomi * @date 2019/8/14 16:23 */public class TestCase extends AbstractTest{    private MiSe miSe;    private JSONObject testCase;    TestCase(JSONObject testCase){        super(testCase.getString("title"));        this.testCase = testCase;        this.steps = new ArrayList<>();        super.addSetUp(testCase.getJSONObject("config").getJSONArray("setup"));        super.addTeardown(testCase.getJSONObject("config").getJSONArray("teardown"));        super.addVariables(testCase.getJSONObject("config").getJSONObject("variables"));    }    private void addStep(JSONObject step) throws Exception {        for (String key : step.keySet()){            JSONObject v = step.getJSONObject(key);            AbstractAssertion assertion = null;            if ("assert".equalsIgnoreCase(key)){                assertion = AssertionFactory.getAssertion(v.getString("func"));                v.put("driver", this.miSe);                assertion.setValidate(v);            }            this.steps.add(new Step().operation(key)                    .selector(v.getString("selector"))                    .object(v.getString("object"))                    .assertion(assertion));        }    }    TestCase setMiSe(MiSe miSe){        this.miSe = miSe;        return this;    }    @Override    public int countTestCases() {        return 1;    }    @Override    public void run(TestResult result) {        MiSeLog.log("--------------------------------------------------------------------");        MiSeLog.log("test case begin: {}", this.getName());        try {            if (testCase.getBooleanValue("ignore")){                throw new SkippedRun("");            }            // 1.bind variable to variables (testSuite.variables -> this.variables)            ExtenderHelper.bindAndEval(variables, variables);            super.setUp("case setup");            // 2.bind variable to step (variables -> step)            ExtenderHelper.bind(testCase.getJSONObject("step"), variables);            this.addStep(testCase.getJSONObject("step"));            this.run();            result.addSuccess(this);            MiSeLog.log("test case success");        } catch (SkippedRun e) {            MiSeLog.log("case run skipped");            result.addSkip(this, e);        } catch (AssertionFailure e) {            MiSeLog.log("case assert failure");            result.addFailure(this, e);        } catch (Exception e) {            MiSeLog.log("case run error", e);            result.addError(this, e);        } finally {            super.setEndTime(System.currentTimeMillis());            super.teardown("case teardown");            MiSeLog.log("test case end: {}", this.getName());        }    }    private void run() throws AssertionFailure, ExecuteError {        for (Step step : steps) {            if (("get").equalsIgnoreCase(step.operation())) {                this.miSe.get(step.selector());            }else if (("close").equalsIgnoreCase(step.operation())) {                this.miSe.close();            }else if (("refresh").equalsIgnoreCase(step.operation())) {                this.miSe.refresh();            }else if (("back").equalsIgnoreCase(step.operation())) {                this.miSe.back();            }else if (("click").equalsIgnoreCase(step.operation())) {                this.miSe.click(step.selector());            }else if (("submit").equalsIgnoreCase(step.operation())) {                this.miSe.submit(step.selector());            }else if (("sendKeys").equalsIgnoreCase(step.operation())) {                this.miSe.sendKeys(step.selector(), step.object());            }else if (("assert").equalsIgnoreCase(step.operation())) {                step.assertion().actual();                step.assertion().setExpected(step.object());                Assert.assertThat(step.assertion());            }        }    }}